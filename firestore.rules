/**
 * @fileoverview Firestore Security Rules for Aptly Dressed eBoutique.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access controls based on user authentication.
 * It uses an owner-only model for user data and restricts creation of subscriber data.
 *
 * Data Structure:
 * - /products/{productId}: Public product information.
 * - /users/{userId}: Private user account data.
 * - /users/{userId}/orders/{orderId}: Order history for each user.
 * - /orders_items/{orderItemId}: Order item information.
 * - /products/{productId}/reviews/{reviewId}: User reviews for products.
 * - /subscribers/{subscriberId}: Newsletter subscribers.
 *
 * Key Security Decisions:
 * - Public read access to product information.
 * - Owner-only access to user profiles and their associated data (orders, reviews).
 * - Restricted access to create subscriber documents: currently only denies create, later to be changed to callable function.
 * - Data validation is relaxed during this prototyping phase except where strictly necessary for authorization.
 *
 * Denormalization for Authorization:
 *  - The ruleset avoids `get()` calls by assuming that authorization-relevant data (e.g., userId) is present in the document being secured or can be derived from the path.
 *
 * Structural Segregation:
 *  - Private user data (profiles, orders) is stored under the /users/{userId} path, while public product data is stored in the top-level /products collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /products collection.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @allow (create, update, delete): Not allowed at this stage.
     * @deny (create, update, delete): No one can modify products through direct client access.
     * @principle Public read, restricted write access to products.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Products should be managed via admin SDK or Cloud Functions.
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (get, list): Only the user themselves can read their profile data. Listing all users is disallowed.
     * @allow (create): A user can create their own profile (self-registration).
     * @allow (update, delete): Only the user themselves can update or delete their profile.
     * @deny (create): Creating another user's profile is disallowed.
     * @deny (update, delete): Modifying or deleting another user's profile is disallowed.
     * @principle Owner-only access to user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/orders collection.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list): Only the user themselves can read their order history.
     * @allow (create): A user can create their own orders.
     * @allow (update, delete): Only the user themselves can update or delete their orders.
     * @deny (create): Creating another user's order is disallowed.
     * @deny (update, delete): Modifying or deleting another user's order is disallowed.
     * @principle Owner-only access to user order history.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /orders_items collection.
     * @path /orders_items/{orderItemId}
     * @allow (get, list): Not allowed at this stage.
     * @allow (create, update, delete): Not allowed at this stage.
     * @deny (get, list, create, update, delete): Order items should be managed via admin SDK or Cloud Functions.
     */
    match /orders_items/{orderItemId} {
      allow get, list: if false;
      allow create, update, delete: if false; // Order items should be managed via admin SDK or Cloud Functions.
    }

    /**
     * @description Rules for the /products/{productId}/reviews collection.
     * @path /products/{productId}/reviews/{reviewId}
     * @allow (get, list): Any user can read product reviews.
     * @allow (create): Any signed-in user can create a review.
     * @allow (update, delete): Only the user who created the review can update or delete it.
     * @deny (create): Creating a review for another user is disallowed.
     * @deny (update, delete): Modifying or deleting another user's review is disallowed.
     * @principle Public read access to reviews, owner-only write access.
     */
    match /products/{productId}/reviews/{reviewId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if request.auth.uid == resource.data.userId && resource != null;
      allow delete: if request.auth.uid == resource.data.userId && resource != null;
    }

    /**
     * @description Rules for the /subscribers collection.
     * @path /subscribers/{subscriberId}
     * @allow (get, list): Not allowed at this stage.
     * @allow (create): Not allowed at this stage.
     * @allow (update, delete): Not allowed at this stage.
     * @deny (get, list, create, update, delete): Subscribers should be managed via admin SDK, Cloud Functions, or callable functions.
     * @principle Restricted access to subscriber data.
     */
    match /subscribers/{subscriberId} {
      allow get, list: if false;
      allow create: if false; // Only authenticated users with a specific role can create subscriber documents.
      allow update: if false;
      allow delete: if false;
    }
  }
}