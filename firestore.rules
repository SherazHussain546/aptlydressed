/**
 * @fileoverview Firestore Security Rules for Aptly Dressed e-commerce platform.
 *
 * Core Philosophy:
 * This ruleset prioritizes security through path-based ownership for user data
 * and public read access for product and style recommendation data. It avoids
 * complex queries in rules by denormalizing data where necessary to make
 * authorization decisions directly on the accessed document.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/orders/{orderId}: Stores orders associated with a specific user.
 * - /users/{userId}/orders/{orderId}/order_items/{orderItemId}: Stores order items associated with a specific order.
 * - /products/{productId}: Stores product information.
 * - /style_recommendations/{styleRecommendationId}: Stores AI Style Recommendations
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Products and Style Recommendations are publicly readable but the app doesn't expose write access for any user (admin functions are out of scope).
 * - List operations are secured to prevent unauthorized access to user data.
 *
 * Denormalization for Authorization:
 *  - User ownership is enforced by nesting data under the /users/{userId} path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Enforces that an 'id' field within the request matches the document ID in the path. Used to maintain relational integrity.
     */
    function isValidOwnerIdOnCreate(ownerId) {
        return request.resource.data.id == ownerId;
    }

    /**
     * @description Checks if the request to create a resource contains the proper creator id.
     */
    function isCreatorIdValid(creatorId){
       return request.resource.data.creatorId == request.auth.uid;
    }

    /**
     * @description Checks if a field is immutable by comparing the existing value with the requested value.
     * @param {string} field - The name of the field to check.
     */
    function isImmutable(field) {
      return request.resource.data[field] == resource.data[field];
    }

    /**
     * @description Rules for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching user ID can create their profile.
     * @allow (get, list) - Authenticated user with matching user ID can read their profile.
     * @allow (update, delete) - Authenticated user with matching user ID can update/delete their profile.
     * @deny (create) - Authenticated user trying to create a profile with a mismatched user ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && isValidOwnerIdOnCreate(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/orders/{orderId} documents.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) - Authenticated user with matching user ID can create an order for themselves.
     * @allow (get, list) - Authenticated user with matching user ID can read their orders.
     * @allow (update, delete) - Authenticated user with matching user ID can update/delete their orders.
     * @deny (create) - Authenticated user trying to create an order for a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/orders/{orderId}/order_items/{orderItemId} documents.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create) - Authenticated user with matching user ID can create an order item for their order.
     * @allow (get, list) - Authenticated user with matching user ID can read their order items.
     * @allow (update, delete) - Authenticated user with matching user ID can update/delete their order items.
     * @deny (create) - Authenticated user trying to create an order item for a different user's order.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for /products/{productId} documents.
     * @path /products/{productId}
     * @allow (get, list) - Anyone can read product information.
     * @deny (create, update, delete) - No one can create, update, or delete products through the client.
     * @principle Allows public read access, restricts write access.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
    }

    /**
     * @description Rules for /style_recommendations/{styleRecommendationId} documents.
     * @path /style_recommendations/{styleRecommendationId}
     * @allow (get, list) - Anyone can read style recommendations.
     * @deny (create, update, delete) - No one can create, update, or delete style recommendations through the client.
     * @principle Allows public read access, restricts write access.
     */
    match /style_recommendations/{styleRecommendationId} {
      allow get: if true;
      allow list: if true;
    }

    /**
     * @description Fixes the reported error: Missing or insufficient permissions to `list` the `notifyme` collection.
     * @path /notifyme
     * @allow (get, list) - Anyone can list the `notifyme` collection.
     * @deny (create, update, delete) - No one can create, update, or delete documents in the `notifyme` collection through the client.
     * @principle Allows public read access, restricts write access.
     */
    match /notifyme {
      allow get: if true;
      allow list: if true;
    }
  }
}