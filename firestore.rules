/**
 * @fileoverview Firestore Security Rules for Aptly Dressed e-commerce platform.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization based on user ownership and well-defined access patterns.
 * It enforces strict control over user data while allowing public read access to product and style recommendation information.
 *
 * Data Structure:
 * - User profiles and their associated data (orders, order items) are nested under /users/{userId} to establish clear ownership.
 * - Products and style recommendations are stored in top-level collections for public access.
 * - A new collection called "Newsletter" is created.
 *
 * Key Security Decisions:
 * - User data (profiles, orders, order items) is strictly controlled, accessible only to the authenticated user.
 * - Public read access is granted for products and style recommendations.
 * - Data validation is limited to ownership checks and relational integrity to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - Path-based ownership is used for user-related data to avoid expensive `get()` calls for authorization.
 *   For example, the userId is encoded in the path `/users/{userId}/orders/{orderId}`. This avoids needing to store the userId inside the Order document and needing to read it.
 *
 * Structural Segregation:
 * - Public (products, style recommendations) and private (user profiles, orders) data are stored in separate collection groups,
 *   improving security and performance for list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to manage their own profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their profile at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, or delete the profile at /users/user_abc.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows authenticated users to manage their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) - User with UID 'user_abc' can create an order at /users/user_abc/orders/order_123.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their order at /users/user_abc/orders/order_123.
     * @deny (create) - User with UID 'user_xyz' cannot create an order at /users/user_abc/orders/order_123.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, or delete the order at /users/user_abc/orders/order_123.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows authenticated users to manage their own order items.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create) - User with UID 'user_abc' can create an order item at /users/user_abc/orders/order_123/order_items/item_456.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their order item at /users/user_abc/orders/order_123/order_items/item_456.
     * @deny (create) - User with UID 'user_xyz' cannot create an order item at /users/user_abc/orders/order_123/order_items/item_456.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, or delete the order item at /users/user_abc/orders/order_123/order_items/item_456.
     * @principle Enforces document ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to products.
     * @path /products/{productId}
     * @allow (get, list) - Any user (authenticated or not) can read product information.
     * @deny (create, update, delete) - No one can create, update, or delete products through the client.
     * @principle Allows public read access with no client-side write access.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to style recommendations.
     * @path /style_recommendations/{styleRecommendationId}
     * @allow (get, list) - Any user (authenticated or not) can read style recommendation information.
     * @deny (create, update, delete) - No one can create, update, or delete style recommendations through the client.
     * @principle Allows public read access with no client-side write access.
     */
    match /style_recommendations/{styleRecommendationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Allows anyone to create a newsletter subscription.
      * @path /newsletter/{newsletterId}
      * @allow (create) - Any user (authenticated or not) can create a newsletter subscription.
      * @deny (get, list, update, delete) - No one can read, list, update, or delete newsletter subscriptions through the client.
      * @principle Allows public creation with no client-side read/write access.
      */
    match /newsletter/{newsletterId} {
      allow get: if false;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}