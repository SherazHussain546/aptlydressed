/**
 * @fileOverview Firestore Security Rules for Aptly Dressed e-commerce platform.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user profiles, orders, and order items.
 * Public read access is granted to product and style recommendation data, while write access is generally restricted.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, owned by the user.
 * - /users/{userId}/orders/{orderId}: Orders placed by a specific user.
 * - /users/{userId}/orders/{orderId}/order_items/{orderItemId}: Items within a specific order.
 * - /products/{productId}: Product information, publicly readable.
 * - /style_recommendations/{styleRecommendationId}: Style recommendations, publicly readable.
 * - /Newsletter: Newsletter subscriptions.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user's ID in the path.
 * - Products and style recommendations are publicly readable but writes are not allowed in this configuration.
 * - Listing of user documents is allowed only for the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the request is made by the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and the resource exists.
     * @param {string} userId The user ID to compare against the resource's userId.
     * @return {boolean} True if the request is made by the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Newsletter subscriptions are publicly accessible to create.
     * @path /Newsletter
     * @allow (create) Anyone can create a newsletter subscription.
     * @deny (get, list, update, delete) No one can get, list, update or delete a newsletter subscription.
     * @principle Allows anyone to create a newsletter subscription.
     */
    match /Newsletter {
      allow create: if true;
      allow get, list, update, delete: if false;
    }

    /**
     * @description Manages user profile information, ensuring only the owner can read and write.
     * @path /users/{userId}
     * @allow (create) A user can create their own profile.
     * @allow (get, list, update, delete) Only the user can read, update, or delete their profile.
     * @deny (create) A user cannot create a profile for another user.
     * @deny (get, list, update, delete) A user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages orders associated with a specific user, ensuring only the owner can access.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) A user can create an order for themselves.
     * @allow (get, list, update, delete) Only the user can read, update, or delete their orders.
     * @deny (create) A user cannot create an order for another user.
     * @deny (get, list, update, delete) A user cannot read, update, or delete another user's orders.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      allow create: if isOwner(userId);
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages order items associated with a specific order, ensuring only the owner can access.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create) A user can create an order item for their order.
     * @allow (get, list, update, delete) Only the user can read, update, or delete their order items.
     * @deny (create) A user cannot create an order item for another user's order.
     * @deny (get, list, update, delete) A user cannot read, update, or delete another user's order items.
     * @principle Enforces document ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow create: if isOwner(userId);
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to product information.
     * @path /products/{productId}
     * @allow (get, list) Anyone can read product information.
     * @deny (create, update, delete) No one can create, update, or delete product information in this configuration.
     * @principle Provides public read access to product data.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to style recommendations.
     * @path /style_recommendations/{styleRecommendationId}
     * @allow (get, list) Anyone can read style recommendations.
     * @deny (create, update, delete) No one can create, update, or delete style recommendations in this configuration.
     * @principle Provides public read access to style recommendation data.
     */
    match /style_recommendations/{styleRecommendationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}