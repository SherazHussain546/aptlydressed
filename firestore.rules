/**
 * @fileoverview Firestore Security Rules for Aptly Dressed eBoutique.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. Products are publicly readable, while user-specific data (profiles, orders, reviews) are strictly controlled by user ownership. Newsletter subscriptions are restricted and should ideally be handled by a callable function.
 *
 * Data Structure:
 * - /products/{productId}: Public product catalog.
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /users/{userId}/orders/{orderId}: Orders belonging to a specific user.
 * - /orders_items/{orderItemId}: Order items. Publicly readable, but writes are disallowed, could be managed by backend only.
 * - /products/{productId}/reviews/{reviewId}: Reviews for a specific product, only the user who created it is allowed to modify.
 * - /subscribers/{subscriberId}: Newsletter subscribers.
 *
 * Key Security Decisions:
 * - Products are publicly readable to maximize visibility.
 * - User data is strictly private and accessible only to the owning user.
 * - Order items are publicly readable, but writes are disallowed.
 * - Listing of user documents is disabled to prevent enumeration.
 * - Newsletter subscriptions are restricted to authenticated users. Ideally, this should be managed by a callable function to prevent abuse.
 *
 * Denormalization for Authorization:
 * - No denormalization is explicitly used in this initial ruleset. However, consider adding an `ownerId` field to the `Review` entity to simplify ownership checks and avoid potential read costs.
 *
 * Structural Segregation:
 * - Private user data is stored under the `/users/{userId}` path, ensuring clear segregation of concerns.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read product information, but restricts writes.
     * @path /products/{productId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Products are publicly readable to maximize visibility, but only writeable by authorized users (not implemented here).
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to user profiles to the owning user. Allows user to create their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with ID 'user123' can (get, create, update, delete) document 'user123'.
     * @deny (get, create, update, delete) User with ID 'user456' cannot (get, create, update, delete) document 'user123'.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to user-specific orders to the owning user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list, create, update, delete) User with ID 'user123' can (get, list, create, update, delete) order 'order456' under their profile.
     * @deny (get, list, create, update, delete) User with ID 'user456' cannot (get, list, create, update, delete) order 'order456' under user 'user123' profile.
     * @principle Enforces user-ownership for order data.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read order item information, but restricts writes to backend only.
     * @path /orders_items/{orderItemId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Order items are publicly readable, but writes are disallowed for prototyping.
     */
    match /orders_items/{orderItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to product reviews to the owning user and allows anyone to read.
     * @path /products/{productId}/reviews/{reviewId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Enforces user-ownership for review writes.
     */
    match /products/{productId}/reviews/{reviewId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(resource.data.userId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Restricts access to subscriber data. Ideally this should be handled by a callable function.
     * @path /subscribers/{subscriberId}
     * @allow (get, list, create, update, delete)
     * @principle Restricts access to subscriber data.
     */
    match /subscribers/{subscriberId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}