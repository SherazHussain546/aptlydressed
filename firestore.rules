/**
 * @fileOverview Firestore Security Rules for Aptly Dressed eBoutique.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for consumer data and order data nested under consumers.
 * Public read access is granted for products and reviews.
 *
 * Data Structure:
 * - /products/{productId}: Public product information.
 * - /consumers/{consumerId}: Private user account information, accessible only by the user.
 * - /consumers/{consumerId}/orders/{orderId}: Orders associated with a specific user, accessible only by that user.
 * - /orders_items/{orderItemId}: Public information about order items.
 * - /products/{productId}/reviews/{reviewId}: Public reviews for products.
 * - /subscribers/{subscriberId}: Newsletter subscribers.
 * - /notify-me/{notificationId}: "Coming Soon" notification signups.
 *
 * Key Security Decisions:
 * - Users can only access their own consumer data and orders.
 * - Products and reviews are publicly readable.
 * - Listing of users is disallowed.
 * - Subscribers and notify-me data collections are writeable with no validation.
 *
 * Denormalization for Authorization:
 *  - Consumer documents are secured based on their ID matching the authenticated user's UID, avoiding the need for additional reads.
 *  - Order documents are secured by nesting them under the consumer's document and validating the consumerId against the authenticated user's UID.
 *
 * Structural Segregation:
 * - Public product data is stored in a top-level collection (/products), while private user data is stored under /consumers/{consumerId}, ensuring clear separation of concerns.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to product information and restricts writes.
     * @path /products/{productId}
     * @allow get, list: Anyone can read product information.
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public read access to product information.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to consumer data to the owning user.
     * @path /consumers/{consumerId}
     * @allow get: User can read their own profile.
     * @allow create: User can create their own profile.
     * @allow update: User can update their own profile.
     * @allow delete: if isExistingOwner(consumerId);
     * @deny list: Listing all consumers is not allowed.
     * @deny create: User cannot create a profile for another user.
     * @deny update: User cannot update another user's profile.
     * @deny delete: User cannot delete another user's profile if it doesn't exist.
     * @principle Enforces document ownership for consumer profiles.
     */
    match /consumers/{consumerId} {
      allow get: if isSignedIn() && isOwner(consumerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(consumerId) && request.auth.uid == consumerId;
      allow update: if isSignedIn() && isOwner(consumerId) && request.auth.uid == consumerId;
      allow delete: if isSignedIn() && isExistingOwner(consumerId);
    }

    /**
     * @description Restricts access to orders to the owning user.
     * @path /consumers/{consumerId}/orders/{orderId}
     * @allow get: User can read their own orders.
     * @allow create: User can create an order for themselves, referencing their user ID.
     * @allow update: User can update their own existing order.
     * @allow delete: User can delete their own existing order.
     * @deny list: Listing all orders for a user is not allowed.
     * @deny create: User cannot create an order for another user.
     * @deny update: User cannot update another user's order.
     * @deny delete: User cannot delete another user's order if it doesn't exist.
     * @principle Enforces document ownership for orders.
     */
    match /consumers/{consumerId}/orders/{orderId} {
      allow get: if isSignedIn() && isOwner(consumerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(consumerId);
      allow update: if isSignedIn() && isOwner(consumerId);
      allow delete: if isSignedIn() && isOwner(consumerId);
    }

    /**
     * @description Grants public read access to order item information.
     * @path /orders_items/{orderItemId}
     * @allow get, list: Anyone can read order item information.
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows public read access to order item information.
     */
    match /orders_items/{orderItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to product reviews and restricts writes.
     * @path /products/{productId}/reviews/{reviewId}
     * @allow get, list: Anyone can read reviews for products.
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && isReviewOwner(productId);
     * @allow delete: if isSignedIn() && isReviewOwner(productId);
     * @principle Allows public read access to reviews and restricts writes.
     */
    match /products/{productId}/reviews/{reviewId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isReviewOwner(request.auth.uid) && resource != null;
      allow delete: if isSignedIn() && isReviewOwner(request.auth.uid) && resource != null;
    }

     /**
      * @description Allows anyone to create, read, update, and delete subscriber information.
      * @path /subscribers/{subscriberId}
      * @allow get, list: if true;
      * @allow create: if true;
      * @allow update: if true;
      * @allow delete: if true;
      * @principle Allows unauthenticated reads and writes to subscriber information.
      */
    match /subscribers/{subscriberId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

     /**
      * @description Allows anyone to create, read, update, and delete "notify me" information.
      * @path /notify-me/{notificationId}
      * @allow get, list: if true;
      * @allow create: if true;
      * @allow update: if true;
      * @allow delete: if true;
      * @principle Allows unauthenticated reads and writes to "notify me" information.
      */
    match /notify-me/{notificationId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }

    function isReviewOwner(userId) {
        return resource.data.userId == userId;
  }
}