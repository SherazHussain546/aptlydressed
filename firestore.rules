rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product information. Write access is restricted.
     * @path /products/{productId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, restricted writes (TODO: Implement authorization function).
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add authorization logic for creating products
      allow update: if false; // TODO: Add authorization logic for updating products
      allow delete: if false; // TODO: Add authorization logic for deleting products
    }

    /**
     * @description Restricts access to user profiles to the owning user.
     * @path /users/{userId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null;
     * @allow delete: if isSignedIn() && isOwner(userId) && resource != null;
     * @deny list: if true;
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Restricts access to a user's orders to the owning user.
     * @path /users/{userId}/orders/{orderId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.userId == userId;
     * @allow delete: if isSignedIn() && isOwner(userId) && resource != null;
     * @allow list: if isSignedIn() && isOwner(userId);
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to order items. Write access is denied.
     * @path /orders_items/{orderItemId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, no writes.
     */
    match /orders_items/{orderItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows users to create and manage their own reviews for products.
     * @path /products/{productId}/reviews/{reviewId}
     * @allow get: if true;
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if isSignedIn() && resource != null && request.resource.data.userId == resource.data.userId;
     * @allow delete: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
     * @allow list: if true;
     * @principle Users can only manage their own reviews.
     */
    match /products/{productId}/reviews/{reviewId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Restricts creation of subscribers to authenticated users with authorization (TODO), and manages via callable function with rate-limiting.
     * @path /subscribers/{subscriberId}
     * @allow get: if false;
     * @allow list: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Restricts write access to authorized clients only (TODO: Implement authorization function or callable function).
     */
    match /subscribers/{subscriberId} {
      allow get: if false;
      allow list: if false;
      allow create: if false; // TODO: Implement authorization logic for creating subscribers. Could be a callable function.
      allow update: if false; // No updates allowed
      allow delete: if false; // No deletes allowed.
    }

    /**
     * @description Restricts creation of subscribers via the 'Notify Me' form to authenticated users with authorization (TODO), and manages via callable function with rate-limiting.
     * @path /notify-me/{notificationId}
     * @allow get: if false;
     * @allow list: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Restricts write access to authorized clients only (TODO: Implement authorization function or callable function).
     */
    match /notify-me/{notificationId} {
      allow get: if false;
      allow list: if false;
      allow create: if false; // TODO: Implement authorization logic for creating subscribers via the notify me page.  Could be a callable function.
      allow update: if false; // No updates allowed
      allow delete: if false; // No deletes allowed
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the existing user is the owner of the document and the document exists
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}