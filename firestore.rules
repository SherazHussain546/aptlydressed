rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID of the owner.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && 'name' in resource.data;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get) - Authenticated user can read their own profile.
     * @allow (update) - Authenticated user can update their own profile.
     * @allow (delete) - Authenticated user can delete their own profile.
     * @deny (create) - Non-authenticated user cannot create a profile.
     * @deny (get) - Non-authenticated user cannot read a profile.
     * @deny (update) - Non-authenticated user cannot update a profile.
     * @deny (delete) - Non-authenticated user cannot delete a profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && isSignedIn();
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for orders within a user's profile.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) - Authenticated user can create an order for themselves.
     * @allow (get) - Authenticated user can read their own orders.
     * @allow (update) - Authenticated user can update their own orders.
     * @allow (delete) - Authenticated user can delete their own orders.
     * @deny (create) - Non-authenticated user cannot create an order.
     * @deny (get) - Non-authenticated user cannot read orders.
     * @deny (update) - Non-authenticated user cannot update orders.
     * @deny (delete) - Non-authenticated user cannot delete orders.
     * @principle Enforces document ownership for writes within a user's scope.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && isSignedIn();
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for order items within an order.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create) - Authenticated user can create an order item for their own order.
     * @allow (get) - Authenticated user can read order items for their own order.
     * @allow (update) - Authenticated user can update order items for their own order.
     * @allow (delete) - Authenticated user can delete order items for their own order.
     * @deny (create) - Non-authenticated user cannot create an order item.
     * @deny (get) - Non-authenticated user cannot read order items.
     * @deny (update) - Non-authenticated user cannot update order items.
     * @deny (delete) - Non-authenticated user cannot delete order items.
     * @principle Enforces document ownership for writes within a user's order scope.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && isSignedIn();
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for products.
     * @path /products/{productId}
     * @allow (get) - Anyone can read product information.
     * @allow (list) - Anyone can list products.
     * @deny (create) - Only authenticated users can create products.
     * @deny (update) - Only authenticated users can update products.
     * @deny (delete) - Only authenticated users can delete products.
     * @principle Allows public read access for products.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();  // TODO: Add admin validation once the schema is updated with an ownership field.
      allow update: if isSignedIn();  // TODO: Add admin validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn();  // TODO: Add admin validation once the schema is updated with an ownership field.
    }

    /**
     * @description Security rules for style recommendations.
     * @path /style_recommendations/{styleRecommendationId}
     * @allow (get) - Anyone can read style recommendations.
     * @allow (list) - Anyone can list style recommendations.
     * @deny (create) - Only authenticated users can create style recommendations.
     * @deny (update) - Only authenticated users can update style recommendations.
     * @deny (delete) - Only authenticated users can delete style recommendations.
     * @principle Allows public read access for style recommendations.
     */
    match /style_recommendations/{styleRecommendationId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();  // TODO: Add admin validation once the schema is updated with an ownership field.
      allow update: if isSignedIn();  // TODO: Add admin validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn();  // TODO: Add admin validation once the schema is updated with an ownership field.
    }
  }
}