/**
 * @fileoverview Firestore Security Rules for Aptly Dressed eBoutique.
 *
 * Core Philosophy:
 * This ruleset prioritizes security through strict access control.
 * User data is protected by ownership, and public data is clearly separated.
 * Unauthenticated users cannot create subscriber documents. Only authorized users can.
 *
 * Data Structure:
 * - /products/{productId}: Public product catalog.
 * - /consumers/{consumerId}: Private user accounts.
 * - /consumers/{consumerId}/orders/{orderId}: User-specific order history.
 * - /orders_items/{orderItemId}: Order item information, separate from orders.
 * - /products/{productId}/reviews/{reviewId}: User reviews for products.
 * - /subscribers/{subscriberId}: Newsletter subscribers.
 * - /notify-me/{notificationId}: "Coming Soon" notification sign-ups.
 *
 * Key Security Decisions:
 * - Users can only manage their own consumer data and orders.
 * - Public read access to the product catalog.
 * - Listing of collections containing private user data is restricted to the owner.
 * - Subscribers and notify-me data is writeable by authenticated users.
 *
 * Denormalization for Authorization:
 * - User IDs are included within order documents to avoid needing `get()` calls to the user document for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product information. Only authenticated users can create, update, or delete products.
     * @path /products/{productId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add admin role check
     * @principle Public read, restricted writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Enforces strict user-ownership for consumer accounts.
     * @path /consumers/{consumerId}
     * @allow get, update, delete: if isOwner(consumerId);
     * @allow create: if isSelfCreation(consumerId);
     * @allow list: if false;
     * @deny get, update, delete: if !isOwner(consumerId);
     * @deny create: if !isSelfCreation(consumerId);
     * @principle Enforces document ownership for writes, restricts listing.
     */
    match /consumers/{consumerId} {
      allow get, update, delete: if isOwner(consumerId);
      allow create: if isSelfCreation(consumerId);
      allow list: if false;

      /**
       * @description Enforces user-ownership for their orders.
       * @path /consumers/{consumerId}/orders/{orderId}
       * @allow get, list, create, update, delete: if isOwner(consumerId);
       * @deny get, list, create, update, delete: if !isOwner(consumerId);
       * @principle Enforces document ownership for all operations.
       */
      match /orders/{orderId} {
        allow get, list, create, update, delete: if isOwner(consumerId);
      }
    }

    /**
     * @description Allows read and write access to order items.
     * @path /orders_items/{orderItemId}
     * @allow get, list, create, update, delete: if true;
     * @principle Allows public access.
     */
    match /orders_items/{orderItemId} {
      allow get, list, create, update, delete: if true;
    }

    /**
     * @description Allows authenticated users to create reviews, and anyone to read them.
     * @path /products/{productId}/reviews/{reviewId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @deny update, delete: if false; // TODO: Add owner or admin validation
     * @principle Public read, authenticated create, restricted updates/deletes.
     */
    match /products/{productId}/reviews/{reviewId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner or admin validation
    }

    /**
     * @description Allows all authenticated users to create subscribers.
     * @path /subscribers/{subscriberId}
     * @allow get, list: if false;
     * @allow create: if isSignedIn();
     * @deny update, delete: if false;
     * @principle Authenticated users can create.
     */
    match /subscribers/{subscriberId} {
      allow get, list: if false;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows all authenticated users to sign up for notifications.
     * @path /notify-me/{notificationId}
     * @allow get, list: if false;
     * @allow create: if isSignedIn();
     * @deny update, delete: if false;
     * @principle Authenticated users can create.
     */
    match /notify-me/{notificationId} {
      allow get, list: if false;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isSelfCreation(userId) {
        return request.auth.uid == userId && request.resource.data.id == userId;
    }
  }
}