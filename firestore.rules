/**
 * @fileoverview Firestore Security Rules for Aptly Dressed e-commerce platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, orders, and order items,
 * while allowing public read access to products and style recommendations.
 *
 * Data Structure:
 * - User profiles are stored under /users/{userId}, with orders and order items as subcollections.
 * - Products and StyleRecommendations are stored in their own top-level collections.
 *
 * Key Security Decisions:
 * - User data (profiles, orders, order items) is strictly controlled by the owning user.
 * - Public read access is granted for products and style recommendations to facilitate display.
 * - Listing all users is disallowed.
 * - No complex data validation is performed in this prototyping phase, except for relational integrity.
 *
 * Denormalization for Authorization:
 * The data structure is designed to avoid the need for `get()` calls in security rules.
 * Path-based ownership (e.g., /users/{userId}/orders/{orderId}) is used to simplify authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists (for update/delete).
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     *    - request.auth.uid: 'user123'
     *    - request.resource.data.id: 'user123'
     * @allow (get) User with ID 'user123' reads their own profile.
     *    - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' attempts to create a profile for 'user123'.
     *    - request.auth.uid: 'user456'
     *    - request.resource.data.id: 'user123'
     * @deny (update) User with ID 'user456' attempts to update 'user123' profile.
     *    - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for orders within a user's profile.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with ID 'user123' creates an order for themselves.
     *    - request.auth.uid: 'user123'
     * @allow (get) User with ID 'user123' reads their own order with ID 'order456'.
     *    - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' attempts to create an order for 'user123'.
     *    - request.auth.uid: 'user456'
     * @deny (update) User with ID 'user456' attempts to update 'user123' order.
     *    - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for order items within an order.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create) User 'user123' creates an order item for their order 'order456'.
     *    - request.auth.uid: 'user123'
     * @allow (get) User 'user123' reads their own order item 'item789'.
     *    - request.auth.uid: 'user123'
     * @deny (create) User 'user456' attempts to create an order item for user 'user123'.
     *    - request.auth.uid: 'user456'
     * @deny (update) User 'user456' attempts to update an order item for user 'user123'.
     *    - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.orderId == orderId;
      allow update: if isExistingOwner(userId) && request.resource.data.orderId == resource.data.orderId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for products.
     * @path /products/{productId}
     * @allow (get) Any user can read product information.
     * @allow (list) Any user can list products.
     * @deny (create) No user can create products (admin only - not implemented).
     * @deny (update) No user can update products (admin only - not implemented).
     * @principle Allows public read access.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin-only rule
      allow update: if false; // TODO: Add admin-only rule
      allow delete: if false; // TODO: Add admin-only rule
    }

    /**
     * @description Rules for style recommendations.
     * @path /style_recommendations/{styleRecommendationId}
     * @allow (get) Any user can read style recommendations.
     * @allow (list) Any user can list style recommendations.
     * @deny (create) No user can create style recommendations (admin only - not implemented).
     * @deny (update) No user can update style recommendations (admin only - not implemented).
     * @principle Allows public read access.
     */
    match /style_recommendations/{styleRecommendationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin-only rule
      allow update: if false; // TODO: Add admin-only rule
      allow delete: if false; // TODO: Add admin-only rule
    }
  }
}