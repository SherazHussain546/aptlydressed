/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user data and allows public read access to product information and reviews.
 *
 * Data Structure:
 * - /products/{productId}: Publicly readable product information. Only authorized users can create, update, or delete products.
 * - /consumers/{consumerId}: User profiles, accessible only to the owning user.
 * - /consumers/{consumerId}/orders/{orderId}: Orders belonging to a specific user, accessible only to that user.
 * - /orders_items/{orderItemId}: Order items with no user association, write access is denied.
 * - /products/{productId}/reviews/{reviewId}: Publicly readable product reviews. Only the user who wrote the review can modify or delete it.
 * - /subscribers/{subscriberId}: Data regarding subscribers. Only authorized users or functions can write subscriber data.
 *
 * Key Security Decisions:
 * - Public read access for products and reviews to allow browsing without authentication.
 * - Strict ownership checks for user profiles and orders to prevent unauthorized access.
 * - No listing of subscribers is allowed.
 *
 * Denormalization for Authorization:
 * - The 'Review' entity requires a 'userId' field to match against `request.auth.uid` for write operations. This avoids needing to query a separate `/users/{userId}` document to check ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product information. Only authenticated users can create, update, or delete products.
     * @path /products/{productId}
     * @allow (get, list): Anyone can read product information.
     * @allow (create): An authenticated user can create a product with valid data.
     * @allow (update, delete): An authenticated user can update or delete a product if they are the owner.
     * @deny (create, update, delete): An unauthenticated user cannot create, update, or delete products.
     * @principle Public read, owner-only writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to consumer profiles to the owning user.
     * @path /consumers/{consumerId}
     * @allow (get): The user with the matching UID can read their profile.
     * @allow (create): A user can create their own profile if the consumerId matches their UID.
     * @allow (update): The user with the matching UID can update their profile.
     * @allow (delete): The user with the matching UID can delete their profile.
     * @deny (get, create, update, delete): Other users cannot access or modify this profile.
     * @principle Enforces document ownership for all operations.
     */
    match /consumers/{consumerId} {
      allow get: if isOwner(consumerId);
      allow create: if isOwner(consumerId);
      allow update: if isExistingOwner(consumerId);
      allow delete: if isExistingOwner(consumerId);
      allow list: if false;
    }

    /**
     * @description Restricts access to orders to the owning user.
     * @path /consumers/{consumerId}/orders/{orderId}
     * @allow (get, list): The user with the matching consumerId can read their orders.
     * @allow (create): The user with the matching consumerId can create orders under their profile.
     * @allow (update): The user with the matching consumerId can update orders under their profile.
     * @allow (delete): The user with the matching consumerId can delete orders under their profile.
     * @deny (get, create, update, delete): Other users cannot access or modify these orders.
     * @principle Enforces document ownership for all operations.
     */
    match /consumers/{consumerId}/orders/{orderId} {
      allow get, list: if isOwner(consumerId);
      allow create: if isOwner(consumerId);
      allow update: if isExistingOwner(consumerId);
      allow delete: if isExistingOwner(consumerId);
    }

    /**
     * @description Restricts access to order items, denying all write operations.
     * @path /orders_items/{orderItemId}
     * @allow (get, list): Anyone can read order item information.
     * @deny (create, update, delete): No one can create, update, or delete order items directly.
     * @principle No write operations allowed.
     */
    match /orders_items/{orderItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to reviews. Restricts write access to the user who created the review.
     * @path /products/{productId}/reviews/{reviewId}
     * @allow (get, list): Anyone can read reviews.
     * @allow (create): An authenticated user can create a review.
     * @allow (update, delete): The user who created the review can update or delete it.
     * @deny (create, update, delete): Other users cannot modify or delete reviews.
     * @principle Public read, owner-only writes.
     */
    match /products/{productId}/reviews/{reviewId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to subscriber data.
     * @path /subscribers/{subscriberId}
     * @deny (get, list, create, update, delete): No direct access to subscriber data.
     * @principle No direct access to subscriber data, to be handled by authorized functions.
     */
    match /subscribers/{subscriberId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}