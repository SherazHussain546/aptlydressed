/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for user-related data (profiles, orders, order items),
 * allows public read access to products and style recommendations,
 * and ensures that only authenticated users can create or modify user-specific data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, enabling path-based ownership.
 * - Orders are stored as subcollections of users (`/users/{userId}/orders/{orderId}`), reinforcing ownership.
 * - Order items are located as subcollections within each order (`/users/{userId}/orders/{orderId}/order_items/{orderItemId}`).
 * - Products and StyleRecommendations exist in their own top-level collections (`/products/{productId}` and `/style_recommendations/{styleRecommendationId}`).
 * - Newsletter subscriptions are in a top-level collection `/Newsletter` and accessible to all
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Products and style recommendations are publicly readable.
 * - Newsletter subscriptions are publicly writable
 * - Listing of all users is disallowed.
 *
 * Denormalization for Authorization:
 *  - Path-based ownership is used to avoid `get()` calls for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership and read/write restrictions for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile.
     * @allow (get, update, delete) Signed-in user accesses their own profile.
     * @deny (create) Signed-in user attempts to create a profile for another user.
     * @deny (get, update, delete) Signed-in user attempts to access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership and read/write restrictions for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) Signed-in user creates an order under their profile.
     * @allow (get, update, delete) Signed-in user accesses their own order.
     * @deny (create) Signed-in user attempts to create an order for another user.
     * @deny (get, update, delete) Signed-in user attempts to access another user's order.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership and read/write restrictions for order items.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create) Signed-in user creates an order item under their order.
     * @allow (get, update, delete) Signed-in user accesses their own order item.
     * @deny (create) Signed-in user attempts to create an order item for another user's order.
     * @deny (get, update, delete) Signed-in user attempts to access another user's order item.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to products.  Restricts write access.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product information.
     * @deny (create, update, delete) No one can create, update, or delete products through client-side rules.
     * @principle Allows public read with owner-only writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to style recommendations.  Restricts write access.
     * @path /style_recommendations/{styleRecommendationId}
     * @allow (get, list) Any user can read style recommendations.
     * @deny (create, update, delete) No one can create, update, or delete style recommendations through client-side rules.
     * @principle Allows public read with owner-only writes.
     */
    match /style_recommendations/{styleRecommendationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to create a newsletter subscription.
     * @path /Newsletter/{newsletterId}
     * @allow (create) Any user can subscribe to the newsletter.
     * @deny (get, list, update, delete) No one can get, list, update or delete subscriptions through client-side rules.
     */
    match /Newsletter/{newsletterId} {
        allow create: if true;
        allow get, list, update, delete: if false;
    }
  }
}