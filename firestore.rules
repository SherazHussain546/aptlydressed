/**
 * @fileoverview Firestore Security Rules for Aptly Dressed e-commerce platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, orders, and order items.
 * Products and StyleRecommendations are publicly readable but writable by authorized users (to be implemented later).
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /users/{userId}/orders/{orderId}: Orders associated with a specific user.
 * - /users/{userId}/orders/{orderId}/order_items/{orderItemId}: Order items for a specific order.
 * - /products/{productId}: Product information (publicly readable).
 * - /style_recommendations/{styleRecommendationId}: Style recommendations (publicly readable).
 *
 * Key Security Decisions:
 * - User profiles, orders, and order items are only accessible to the owning user.
 * - Products and StyleRecommendations are publicly readable to allow for browsing.
 * - Listing of user subcollections (orders, order_items) is allowed only for the owner.
 * - No schema validation is performed beyond authorization-critical fields.
 *
 * Denormalization for Authorization:
 *  The data model uses path-based ownership for user-related data. This means that the user ID is encoded in the path to the document, avoiding the need for `get()` calls to parent documents to check ownership.
 * Structural Segregation:
 *  Products and StyleRecommendations are stored in top-level collections, separate from user-specific data, to enable public read access without compromising user privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - Authenticated user can access their own profile if the userId matches their auth.uid.
     * @deny (create) - If the userId does not match the authenticated user's ID.
     * @deny (update, delete) - If the userId does not match the authenticated user's ID, or if the document does not exist.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted for privacy.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of userId on update
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to order documents within a user's profile.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) - Authenticated user can create orders under their profile.
     * @allow (get, list, update, delete) - Authenticated user can access orders under their profile.
     * @deny (create) - If the userId does not match the authenticated user's ID.
     * @deny (update, delete) - If the userId does not match the authenticated user's ID, or if the document does not exist.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to order item documents within an order.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create) - Authenticated user can create order items under their order.
     * @allow (get, list, update, delete) - Authenticated user can access order items under their order.
     * @deny (create) - If the userId does not match the authenticated user's ID.
     * @deny (update, delete) - If the userId does not match the authenticated user's ID, or if the document does not exist.
     * @principle Enforces document ownership for order items.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to product documents.
     * @path /products/{productId}
     * @allow (get, list) - All users can read product information.
     * @deny (create, update, delete) - Only authorized users can modify product information (authorization to be implemented later).
     * @principle Allows public read access for product information.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add authorization for product creation.
      allow update: if false; // TODO: Add authorization for product updates.
      allow delete: if false; // TODO: Add authorization for product deletion.
    }

    /**
     * @description Controls access to style recommendation documents.
     * @path /style_recommendations/{styleRecommendationId}
     * @allow (get, list) - All users can read style recommendation information.
     * @deny (create, update, delete) - Only authorized users can modify style recommendation information (authorization to be implemented later).
     * @principle Allows public read access for style recommendation information.
     */
    match /style_recommendations/{styleRecommendationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add authorization for style recommendation creation.
      allow update: if false; // TODO: Add authorization for style recommendation updates.
      allow delete: if false; // TODO: Add authorization for style recommendation deletion.
    }
  }
}