/**
 * @fileOverview Firestore Security Rules for Aptly Dressed E-commerce Platform.
 *
 * Core Philosophy:
 * This ruleset prioritizes a strict user-ownership model for user-related data (profiles, orders, order items)
 * and provides public read access to product and style recommendation data.  Authorization is enforced
 * based on path-based ownership wherever possible, avoiding complex `get()` calls.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, owned by the user.
 * - /users/{userId}/orders/{orderId}: Orders placed by a specific user.
 * - /users/{userId}/orders/{orderId}/order_items/{orderItemId}: Items within a specific order.
 * - /products/{productId}: Product catalog, publicly readable.
 * - /style_recommendations/{styleRecommendationId}: Style recommendations, publicly readable.
 * - /subscribers/{subscriberId}: Email subscribers, publicly writable
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is granted to the /products and /style_recommendations collections to allow
 *   unauthenticated browsing.  Writes to these collections are not explicitly denied, but implicitly
 *   denied as there are no write rules defined for them (which defaults to deny all writes).
 * - The default security posture for ambiguous relationships is strict owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @returns {boolean} True if the user ID matches the request's authentication UID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource, and that the document exists.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @returns {boolean} True if the user ID matches the request's authentication UID and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, list, update, delete) - Authenticated user can only access their own profile.
     * @deny (create) - Unauthenticated users cannot create profiles.
     * @deny (get, list, update, delete) - Authenticated users cannot access other user's profiles.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) - Authenticated user can create orders under their profile.
     * @allow (get, list, update, delete) - Authenticated user can only access orders under their own profile.
     * @deny (create) - Unauthenticated users cannot create orders.
     * @deny (get, list, update, delete) - Authenticated users cannot access other user's orders.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for order items.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create) - Authenticated user can create order items under their orders.
     * @allow (get, list, update, delete) - Authenticated user can only access order items under their own orders.
     * @deny (create) - Unauthenticated users cannot create order items.
     * @deny (get, list, update, delete) - Authenticated users cannot access other user's order items.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to products, with owner-only writes (requires authorId field).
     * @path /products/{productId}
     * @allow (get, list) - Anyone can view the product catalog.
     * @deny (create, update, delete) - No write rules defined.
     * @principle Public read access with owner-only writes (if authorId existed).
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // No authenticated users allowed to create, update or delete products.
    }

    /**
     * @description Allows public read access to style recommendations, with owner-only writes (requires authorId field).
     * @path /style_recommendations/{styleRecommendationId}
     * @allow (get, list) - Anyone can view the style recommendations.
     * @deny (create, update, delete) - No write rules defined.
     * @principle Public read access with owner-only writes (if authorId existed).
     */
    match /style_recommendations/{styleRecommendationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // No authenticated users allowed to create, update or delete style recommendations.
    }
      /**
       * @description Allows public read access to email subscribers, with anyone able to create a subscriber
       * @path /subscribers/{subscriberId}
       * @allow (create) - Anyone can create a subscriber
       * @deny (get, list, update, delete) - No one allowed to read, list, update, or delete subscribers.
       */
      match /subscribers/{subscriberId} {
        allow create: if true;
        allow get: if false;
        allow list: if false;
        allow update: if false;
        allow delete: if false;
      }
  }
}