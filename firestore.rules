/**
 * @fileoverview Firestore Security Rules for Aptly Dressed e-commerce platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, orders, and order items,
 * while allowing public read access to products and style recommendations.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Orders are stored as subcollections of users: `/users/{userId}/orders/{orderId}`.
 * - Order items are stored as subcollections within each order: `/users/{userId}/orders/{orderId}/order_items/{orderItemId}`.
 * - Products are stored in the top-level collection `/products/{productId}`.
 * - Style recommendations are stored in the top-level collection `/style_recommendations/{styleRecommendationId}`.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data, orders, and order items.
 * - Products and style recommendations are publicly readable.
 * - Listing of all users is disallowed.
 * - No write access is granted to the public without authentication.
 *
 * Denormalization for Authorization:
 * The data structure is designed to avoid `get()` calls for authorization.
 * User ownership is derived from the path structure (e.g., `/users/{userId}`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - Authenticated user can read, update, and delete their own profile if the userId matches their auth.uid.
     * @deny (create) - If the user is not authenticated.
     * @deny (get, list, update, delete) - If the userId does not match the authenticated user's uid.
     * @principle Enforces document ownership and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to order documents within a user's profile.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) - Authenticated user can create an order under their userId.
     * @allow (get, list, update, delete) - Authenticated user can read, update, and delete orders under their userId.
     * @deny (create) - If the user is not authenticated or if the userId does not match their auth.uid.
     * @deny (get, list, update, delete) - If the userId does not match the authenticated user's uid.
     * @principle Enforces document ownership for orders and prevents unauthorized access.
     */
    match /users/{userId}/orders/{orderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to order item documents within an order.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create) - Authenticated user can create an order item under their order.
     * @allow (get, list, update, delete) - Authenticated user can read, update, and delete order items under their order.
     * @deny (create) - If the user is not authenticated or if the userId does not match their auth.uid.
     * @deny (get, list, update, delete) - If the userId does not match the authenticated user's uid.
     * @principle Enforces document ownership for order items and prevents unauthorized access.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to product documents.
     * @path /products/{productId}
     * @allow (get, list) - Allows anyone to read product information.
     * @deny (create, update, delete) - Prevents anyone from creating, updating, or deleting products without authentication.
     * @principle Allows public read access while restricting write access to prevent unauthorized modifications.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to style recommendation documents.
     * @path /style_recommendations/{styleRecommendationId}
     * @allow (get, list) - Allows anyone to read style recommendation information.
     * @deny (create, update, delete) - Prevents anyone from creating, updating, or deleting style recommendations without authentication.
     * @principle Allows public read access while restricting write access to prevent unauthorized modifications.
     */
    match /style_recommendations/{styleRecommendationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}