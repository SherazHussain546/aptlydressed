/**
 * @fileoverview Firestore Security Rules for Aptly Dressed eBoutique.
 *
 * Core Philosophy:
 * This ruleset enforces a strict separation of concerns, with clear ownership
 * and role-based access control.  It prioritizes security by default, requiring
 * explicit rules for each type of data access. The rules are designed to
 * prevent unauthorized data modification and leakage.
 *
 * Data Structure:
 * - /products/{productId}: Public product catalog.
 * - /consumers/{consumerId}: Private user profiles, accessible only to the
 *   owning user.
 * - /consumers/{consumerId}/orders/{orderId}: Orders placed by a specific user,
 *   accessible only to that user.
 * - /orders_items/{orderItemId}: Order items, publicly accessible.
 * - /products/{productId}/reviews/{reviewId}: Public product reviews.
 * - /subscribers/{subscriberId}: Subscriber information. Only admins can create.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the `/products` and `/products/{productId}/reviews` and `/orders_items` collections,
 *   allowing anyone to view product information and reviews.
 * - All other collections require authentication and authorization checks.
 * - Data validation is minimal in this prototyping phase.
 *
 * Denormalization for Authorization:
 *  - To avoid costly `get()` calls, authorization checks rely on data present
 *    directly within the documents being secured. For example, ownership checks
 *    are performed by comparing `request.auth.uid` to a `userId` field within
 *    the document.
 *
 * Structural Segregation:
 *  - Private user data (profiles, orders) is stored under the `/consumers/{consumerId}`
 *    collection, ensuring that only the owning user can access it.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product information. Only authenticated users can create, update, or delete products.
     * @path /products/{productId}
     * @allow (get, list): if true
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if isSignedIn()
     * @deny (create): if false
     * @deny (update, delete): if false
     * @principle Allows public read access for products, restricts modifications to authenticated users.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows a user to read and write their own consumer profile.
     * @path /consumers/{consumerId}
     * @allow (get, create, update, delete, list): if isOwner(consumerId)
     * @deny (get, create, update, delete, list): if !isOwner(consumerId)
     * @principle Enforces user-ownership for consumer profiles.
     */
    match /consumers/{consumerId} {
      allow get, create, update, delete, list: if isOwner(consumerId);
    }

    /**
     * @description Allows a user to read and write their own orders.
     * @path /consumers/{consumerId}/orders/{orderId}
     * @allow (get, create, update, delete, list): if isOwner(consumerId)
     * @deny (get, create, update, delete, list): if !isOwner(consumerId)
     * @principle Enforces user-ownership for orders.
     */
    match /consumers/{consumerId}/orders/{orderId} {
      allow get, create, update, delete, list: if isOwner(consumerId);
    }

     /**
      * @description Allows public read access to order item information. Only authenticated users can create, update, or delete order items.
      * @path /orders_items/{orderItemId}
      * @allow (get, list): if true
      * @allow (create): if isSignedIn()
      * @allow (update, delete): if isSignedIn()
      * @deny (create): if false
      * @deny (update, delete): if false
      * @principle Allows public read access for order items, restricts modifications to authenticated users.
      */
    match /orders_items/{orderItemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to product reviews. Only authenticated users can create reviews.  Reviews can only be updated or deleted by the author.
     * @path /products/{productId}/reviews/{reviewId}
     * @allow (get, list): if true
     * @allow (create): if isSignedIn();
     * @allow (update, delete): if isOwner(resource.data.userId) && resource != null;
     * @deny (create): if false
     * @deny (update, delete): if !(isOwner(resource.data.userId) && resource != null)
     * @principle Allows public listing of reviews but restricts modifications to review owners.
     */
    match /products/{productId}/reviews/{reviewId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Restricts creation of subscriber documents to authenticated users only.
     * @path /subscribers/{subscriberId}
     * @allow get, list: if false;
     * @allow create: if isSignedIn();
     * @allow update, delete: if false;
     * @deny get, list, update, delete: if true;
     * @principle Restricts subscriber creation to authenticated users.
     */
    match /subscribers/{subscriberId} {
      allow get, list: if false;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}