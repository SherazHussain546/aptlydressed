/**
 * @description This ruleset enforces a strict model where only authenticated users can manage their own data.
 *   It allows public read access to products and their reviews. Subscriptions are restricted.
 * @dataStructure
 *   - /products/{productId}: Publicly readable product information.
 *   - /users/{userId}: User-specific data, accessible only by the user.
 *   - /users/{userId}/orders/{orderId}: Order information, accessible only by the user.
 *   - /orders_items/{orderItemId}: Order item information, publicly readable.
 *   - /products/{productId}/reviews/{reviewId}: Publicly readable product reviews.
 *   - /subscribers/{subscriberId}: Newsletter subscribers. Restricted creation.
 *   - /notify-me/{notificationId}: "Coming Soon" notification sign-ups. Restricted creation.
 * @keySecurityDecisions
 *   - Users can only access their own data under /users/{userId}.
 *   - Products and reviews are publicly readable.
 *   - Subscriptions are only allowed by authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product information.  Write access is not permitted.
     * @path /products/{productId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to product information.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read, update, and delete their own user document. Creation is allowed only if the user ID matches the authenticated user's ID.
     * @path /users/{userId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @allow list: if false;
     * @deny get: if !isSignedIn();
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Enforces document ownership for user data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update and delete their own orders. The userId path parameter must match the order's userId field.
     * @path /users/{userId}/orders/{orderId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.userId == userId;
     * @allow delete: if isExistingOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @deny get: if !isSignedIn();
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Enforces document ownership for orders and validates relational integrity.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to order item information. Write access is not permitted.
     * @path /orders_items/{orderItemId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to order item data.
     */
    match /orders_items/{orderItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to product reviews.  Write access is only allowed if the user is signed in and the review's userId matches the authenticated user's ID.
     * @path /products/{productId}/reviews/{reviewId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
     * @allow delete: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
     * @deny get: if !isSignedIn();
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Allows public read access to reviews, but enforces ownership for writes.
     */
    match /products/{productId}/reviews/{reviewId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Allows creating a subscriber document by an authenticated user. No listing, updating, or deleting.
     * @path /subscribers/{subscriberId}
     * @allow create: if isSignedIn();
     * @deny get, list, update, delete: if false;
     * @principle Requires authentication for subscription creation.
     */
    match /subscribers/{subscriberId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Allows creating a subscriber document for "coming soon" notifications by an authenticated user. No listing, updating, or deleting.
      * @path /notify-me/{notificationId}
      * @allow create: if isSignedIn();
      * @deny get, list, update, delete: if false;
      * @principle Requires authentication for subscription creation.
      */
    match /notify-me/{notificationId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}